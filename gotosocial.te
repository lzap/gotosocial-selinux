# vim: sw=4:ts=4:et

policy_module(gotosocial, 1.0)

###############
#
# Types
#

type gotosocial_t;
type gotosocial_exec_t;

type gotosocial_unit_file_t;
systemd_unit_file(gotosocial_unit_file_t)

require{
    type etc_t;
}
typealias etc_t alias gotosocial_config_t;

type gotosocial_var_t;
files_type(gotosocial_var_t);

type gotosocial_log_t;
logging_log_file(gotosocial_log_t)

type gotosocial_var_run_t;
files_pid_file(gotosocial_var_run_t)

require{
    type bin_t;
    type httpd_t;
    type httpd_tmp_t;
    type ifconfig_exec_t;
    type init_t;
    type proc_net_t;
    type puppetmaster_exec_t;
    type puppetmaster_t;
    type sysctl_net_t;
    type websm_port_t;
    type cockpit_ws_t;
    type cockpit_session_t;
    type cockpit_session_exec_t;
    type unconfined_service_t;
    type http_cache_port_t;
    type squid_port_t;
}

init_daemon_domain(gotosocial_t, gotosocial_exec_t)
#allow gotosocial_t unconfined_service_t:tcp_socket { connected_stream_socket_perms };
files_pid_filetrans(gotosocial_t, gotosocial_var_run_t, { file dir sock_file })

# Generic domain rules
files_read_usr_files(gotosocial_t)
kerberos_read_config(gotosocial_t)
auth_read_passwd(gotosocial_t)
dev_list_sysfs(gotosocial_t)
dev_read_sysfs(gotosocial_t)
hostname_exec(gotosocial_t)
optional_policy(`
    ipa_filetrans_named_content(gotosocial_t)
')
miscfiles_read_localization(gotosocial_t)
kernel_read_network_state(gotosocial_t)
kernel_read_system_state(gotosocial_t)
sysnet_read_config(gotosocial_t)
miscfiles_read_generic_certs(gotosocial_t)
files_manage_generic_tmp_files(gotosocial_t)
files_manage_generic_tmp_dirs(gotosocial_t)
kernel_read_net_sysctls(gotosocial_t)
kernel_search_network_sysctl(gotosocial_t)
init_nnp_daemon_domain(gotosocial_t)

# Generic networking
allow gotosocial_t self:tcp_socket create_stream_socket_perms;

# General files read and write
admin_pattern(gotosocial_t, gotosocial_var_t, gotosocial_var_t)
admin_pattern(gotosocial_t, gotosocial_var_run_t, gotosocial_var_run_t)

# Allow logging (appending, reading) but not writing or deleting
optional_policy(`
    logging_list_logs(gotosocial_t)
')
write_files_pattern(gotosocial_t, gotosocial_log_t, gotosocial_log_t)
allow gotosocial_t gotosocial_log_t:dir { create_file_perms append_file_perms list_dir_perms search_dir_perms };
allow gotosocial_t gotosocial_log_t:file { create_file_perms append_file_perms };

# Allow syslog
kernel_dgram_send(gotosocial_t)
optional_policy(`
    logging_create_devlog_dev(gotosocial_t)
')

# Listening for HTTP communication on HTTP(s) port range
corenet_all_recvfrom_netlabel(gotosocial_t)
corenet_tcp_sendrecv_generic_if(gotosocial_t)
corenet_udp_sendrecv_generic_if(gotosocial_t)
corenet_tcp_sendrecv_generic_node(gotosocial_t)
corenet_udp_sendrecv_generic_node(gotosocial_t)
corenet_tcp_sendrecv_all_ports(gotosocial_t)
corenet_udp_sendrecv_all_ports(gotosocial_t)
corenet_tcp_bind_generic_node(gotosocial_t)
corenet_udp_bind_generic_node(gotosocial_t)
corenet_tcp_bind_http_port(gotosocial_t)
corenet_udp_bind_http_port(gotosocial_t)
corenet_tcp_bind_http_cache_port(gotosocial_t)
corenet_sendrecv_http_server_packets(gotosocial_t)
corenet_tcp_sendrecv_http_port(gotosocial_t)
corenet_tcp_bind_puppet_port(gotosocial_t)

# Connecting to HTTP servers
corenet_tcp_connect_http_port(gotosocial_t)

# Allow DNS queries
sysnet_dns_name_resolve(gotosocial_t)
corenet_udp_bind_generic_port(gotosocial_t)
corenet_udp_bind_generic_node(gotosocial_t)

# Connecting to PostgreSQL
corenet_tcp_connect_postgresql_port(gotosocial_t)
optional_policy(`
    postgresql_stream_connect(gotosocial_t)
')

# Sending of email via sendmail
optional_policy(`
    mta_send_mail(gotosocial_t)
')

# Sending of email directly
corenet_tcp_connect_smtp_port(gotosocial_t)

# This might be needed if the app needs to connect to all port
corenet_tcp_connect_all_ports(gotosocial_t)

gen_require(`
    type logrotate_t;
    type system_cronjob_tmp_t;
')

# Allow sending signals in logrotate scripts
allow logrotate_t gotosocial_unit_file_t:file read_file_perms;
allow logrotate_t gotosocial_unit_file_t:service manage_service_perms;
